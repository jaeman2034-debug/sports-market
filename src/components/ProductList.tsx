// src/components/ProductList.tsx
import React, { useEffect, useState } from "react";
import { db, auth } from "../lib/firebaseConfig";
import { collection, getDocs, orderBy, query, deleteDoc, doc } from "firebase/firestore";
import { useNavigate } from 'react-router-dom';
import { useAuthState } from "react-firebase-hooks/auth";
import "../App.css";

interface Product {
  id: string;
  name: string;
  desc: string;
  price: number;
  imageUrl?: string;
  imageBase64?: string;
  aiAnalysis?: string[];
  aiRecommendedPrice?: number;
  aiCategory?: string;
  aiBrand?: string;
  aiCondition?: string;
  priceSatisfaction?: "satisfied" | "disappointed";
  sellerId?: string;
  sellerEmail?: string;
  status?: "ÌåêÎß§Ï§ë" | "ÏòàÏïΩÏ§ë" | "Í±∞ÎûòÏôÑÎ£å";
  createdAt?: { seconds: number };
  image?: string; // Added image field
  location?: {
    latitude: number;
    longitude: number;
    address?: string;
  };
}

function ProductList() {
  const [user] = useAuthState(auth);
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [deleting, setDeleting] = useState(false);
  const [purchasing, setPurchasing] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState<"latest" | "price-low" | "price-high" | "distance">("latest");
  const [userLocation, setUserLocation] = useState<{latitude: number; longitude: number} | null>(null);
  const [locationPermission, setLocationPermission] = useState<"granted" | "denied" | "pending">("pending");
  const [userAddress, setUserAddress] = useState<string>("");
  const navigate = useNavigate();

  // Í¥ÄÎ¶¨Ïûê Í∂åÌïú Ï≤¥ÌÅ¨ Ìï®Ïàò
  const isAdmin = () => {
    if (!user?.email) return false;
    
    // ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Í¥ÄÎ¶¨Ïûê Ïù¥Î©îÏùº Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    const adminEmails = import.meta.env.VITE_ADMIN_EMAILS?.split(',').map(email => email.trim()) || [];
    
    // Í∏∞Î≥∏ Í¥ÄÎ¶¨Ïûê Ïù¥Î©îÏùº (Í∞úÎ∞úÏö©)
    const defaultAdmins = ['admin@example.com', 'ljm@example.com'];
    
    const allAdminEmails = [...adminEmails, ...defaultAdmins];
    
    return allAdminEmails.includes(user.email);
  };

  useEffect(() => {
    fetchProducts();
    requestLocationPermission();
  }, []);

  // GPS ÏúÑÏπò Í∂åÌïú ÏöîÏ≤≠ Î∞è ÌòÑÏû¨ ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞
  const requestLocationPermission = () => {
    console.log("üîÑ GPS ÏúÑÏπò Í∂åÌïú ÏöîÏ≤≠ ÏãúÏûë");
    console.log("üìç navigator.geolocation ÏßÄÏõê:", !!navigator.geolocation);
    
    if (!navigator.geolocation) {
      console.log("‚ùå GPS Í∏∞Îä•ÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Î∏åÎùºÏö∞Ï†ÄÏûÖÎãàÎã§.");
      setLocationPermission("denied");
      return;
    }

    console.log("üìç GPS ÏúÑÏπò ÏöîÏ≤≠ Ï§ë...");
    setLocationPermission("pending");

    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const { latitude, longitude } = position.coords;
        console.log("‚úÖ GPS ÏúÑÏπò ÌöçÎìù ÏÑ±Í≥µ:", { latitude, longitude });
        setUserLocation({ latitude, longitude });
        setLocationPermission("granted");
        console.log("üìç ÌòÑÏû¨ ÏúÑÏπò ÏÑ§Ï†ï ÏôÑÎ£å:", { latitude, longitude });
        
        // Ï£ºÏÜå Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        try {
          const address = await getAddressFromCoordinates(latitude, longitude);
          setUserAddress(address);
          console.log("üìç Ï£ºÏÜå Î≥ÄÌôò ÏôÑÎ£å:", address);
        } catch (error) {
          console.error("‚ùå Ï£ºÏÜå Î≥ÄÌôò Ïã§Ìå®:", error);
          const estimatedAddress = getEstimatedLocation(latitude, longitude);
          setUserAddress(estimatedAddress);
          console.log("üìç Ï∂îÏ†ï Ï£ºÏÜå ÏÑ§Ï†ï:", estimatedAddress);
        }
      },
      (error) => {
        console.error("‚ùå GPS ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:", error);
        console.error("‚ùå Ïò§Î•ò ÏΩîÎìú:", error.code);
        console.error("‚ùå Ïò§Î•ò Î©îÏãúÏßÄ:", error.message);
        
        let errorMessage = "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò";
        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = "ÏúÑÏπò Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§.";
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = "ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.";
            break;
          case error.TIMEOUT:
            errorMessage = "ÏúÑÏπò ÏöîÏ≤≠ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§.";
            break;
        }
        console.error("‚ùå Ïò§Î•ò ÏÑ§Î™Ö:", errorMessage);
        
        setLocationPermission("denied");
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000 // 5Î∂Ñ
      }
    );
  };

  // Îëê ÏßÄÏ†ê Í∞ÑÏùò Í±∞Î¶¨ Í≥ÑÏÇ∞ (Haversine Í≥µÏãù)
  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
    const R = 6371; // ÏßÄÍµ¨Ïùò Î∞òÏßÄÎ¶Ñ (km)
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distance = R * c; // km
    return distance;
  };

  // Í±∞Î¶¨ Ìè¨Îß∑ÌåÖ Ìï®Ïàò
  const formatDistance = (distance: number): string => {
    if (distance < 1) {
      return `${Math.round(distance * 1000)}m`;
    } else if (distance < 10) {
      return `${distance.toFixed(1)}km`;
    } else {
      return `${Math.round(distance)}km`;
    }
  };

  // Ï¢åÌëúÎ•º Ï£ºÏÜåÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
  const getAddressFromCoordinates = async (latitude: number, longitude: number): Promise<string> => {
    try {
      // Ïπ¥Ïπ¥Ïò§ ÏßÄÎèÑ APIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ï¢åÌëúÎ•º Ï£ºÏÜåÎ°ú Î≥ÄÌôò
      const response = await fetch(
        `https://dapi.kakao.com/v2/local/geo/coord2address.json?x=${longitude}&y=${latitude}`,
        {
          headers: {
            'Authorization': `KakaoAK ${import.meta.env.VITE_KAKAO_API_KEY || 'your_kakao_api_key'}`
          }
        }
      );
      
      if (!response.ok) {
        throw new Error('Ï£ºÏÜå Î≥ÄÌôò Ïã§Ìå®');
      }
      
      const data = await response.json();
      
      if (data.documents && data.documents.length > 0) {
        const address = data.documents[0].address;
        // ÌñâÏ†ïÍµ¨Ïó≠Î™Ö Ï∂îÏ∂ú (Ïòà: "ÏÑúÏö∏ÌäπÎ≥ÑÏãú Í∞ïÎÇ®Íµ¨ Ïó≠ÏÇºÎèô" -> "Ïó≠ÏÇºÎèô")
        const addressParts = address.address_name.split(' ');
        const dong = addressParts[addressParts.length - 1]; // ÎßàÏßÄÎßâ Î∂ÄÎ∂ÑÏù¥ Îèô/Ïùç/Î©¥
        
        return dong;
      }
      
      return "ÏúÑÏπò Ï†ïÎ≥¥ ÏóÜÏùå";
    } catch (error) {
      console.error("Ï£ºÏÜå Î≥ÄÌôò Ïò§Î•ò:", error);
      
      // Ïπ¥Ïπ¥Ïò§ APIÍ∞Ä ÏóÜÏùÑ Í≤ΩÏö∞ ÎåÄÏ≤¥ Î∞©Î≤ï: Ï£ºÏöî ÎèÑÏãú Ï¢åÌëú Î≤îÏúÑÎ°ú Ï∂îÏ†ï
      return getEstimatedLocation(latitude, longitude);
    }
  };

  // Ï¢åÌëú Î≤îÏúÑÎ°ú ÎåÄÎûµÏ†ÅÏù∏ ÏúÑÏπò Ï∂îÏ†ï (Ïπ¥Ïπ¥Ïò§ API ÏóÜÏùÑ Îïå ÏÇ¨Ïö©)
  const getEstimatedLocation = (latitude: number, longitude: number): string => {
    // ÏÑúÏö∏ Ï£ºÏöî ÏßÄÏó≠
    if (latitude >= 37.413294 && latitude <= 37.715133 && 
        longitude >= 126.734086 && longitude <= 127.269311) {
      if (latitude >= 37.5 && longitude >= 127.0) return "Í∞ïÎÇ®Íµ¨";
      if (latitude >= 37.5 && longitude < 127.0) return "ÏÑúÏ¥àÍµ¨";
      if (latitude < 37.5 && longitude >= 127.0) return "Í¥ëÏßÑÍµ¨";
      return "ÏÑúÏö∏Ïãú";
    }
    
    // Í≤ΩÍ∏∞ÎèÑ Ï£ºÏöî ÏßÄÏó≠
    if (latitude >= 37.0 && latitude <= 37.8 && 
        longitude >= 126.5 && longitude <= 127.5) {
      if (latitude >= 37.7 && longitude >= 127.0) return "ÏùòÏ†ïÎ∂ÄÏãú";
      if (latitude >= 37.6 && longitude >= 127.0) return "ÎÇ®ÏñëÏ£ºÏãú";
      if (latitude >= 37.5 && longitude >= 127.0) return "Íµ¨Î¶¨Ïãú";
      if (latitude >= 37.7 && longitude < 127.0) return "Í≥†ÏñëÏãú";
      return "Í≤ΩÍ∏∞ÎèÑ";
    }
    
    // Î∂ÄÏÇ∞
    if (latitude >= 35.0 && latitude <= 35.3 && 
        longitude >= 128.9 && longitude <= 129.2) {
      return "Î∂ÄÏÇ∞Ïãú";
    }
    
    // ÎåÄÍµ¨
    if (latitude >= 35.8 && latitude <= 36.0 && 
        longitude >= 128.4 && longitude <= 128.7) {
      return "ÎåÄÍµ¨Ïãú";
    }
    
    // Ïù∏Ï≤ú
    if (latitude >= 37.4 && latitude <= 37.6 && 
        longitude >= 126.4 && longitude <= 126.8) {
      return "Ïù∏Ï≤úÏãú";
    }
    
    // ÎåÄÏ†Ñ
    if (latitude >= 36.2 && latitude <= 36.4 && 
        longitude >= 127.3 && longitude <= 127.5) {
      return "ÎåÄÏ†ÑÏãú";
    }
    
    // Í¥ëÏ£º
    if (latitude >= 35.1 && latitude <= 35.2 && 
        longitude >= 126.8 && longitude <= 127.0) {
      return "Í¥ëÏ£ºÏãú";
    }
    
    // Ïö∏ÏÇ∞
    if (latitude >= 35.4 && latitude <= 35.6 && 
        longitude >= 129.2 && longitude <= 129.4) {
      return "Ïö∏ÏÇ∞Ïãú";
    }
    
    return "ÌïúÍµ≠";
  };

  // Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ÎßÅ Î°úÏßÅ
  useEffect(() => {
    let filtered = [...products];
    
    // Í≤ÄÏÉâÏñ¥ ÌïÑÌÑ∞ÎßÅ
    if (searchTerm.trim()) {
      filtered = filtered.filter(product => 
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.desc.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (product.sellerEmail && product.sellerEmail.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (product.aiCategory && product.aiCategory.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (product.aiBrand && product.aiBrand.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }
    
    // Ï†ïÎ†¨
    filtered.sort((a, b) => {
      switch (sortBy) {
        case "price-low":
          return a.price - b.price;
        case "price-high":
          return b.price - a.price;
        case "distance":
          if (userLocation && a.location && b.location) {
            const distanceA = calculateDistance(
              userLocation.latitude, userLocation.longitude,
              a.location.latitude, a.location.longitude
            );
            const distanceB = calculateDistance(
              userLocation.latitude, userLocation.longitude,
              b.location.latitude, b.location.longitude
            );
            return distanceA - distanceB;
          }
          return 0;
        case "latest":
        default:
          if (a.createdAt && b.createdAt) {
            return b.createdAt.seconds - a.createdAt.seconds;
          }
          return 0;
      }
    });
    
    setFilteredProducts(filtered);
  }, [products, searchTerm, sortBy]);

  const fetchProducts = async () => {
    setLoading(true);
    setError("");
    try {
      console.log("üîÑ ÏÉÅÌíà Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ ÏãúÏûë...");
      const q = query(collection(db, "products"), orderBy("createdAt", "desc"));
      const snapshot = await getDocs(q);
      const items = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as Product[];
      
      console.log("üì¶ Î∂àÎü¨Ïò® ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞:", items.map(item => ({
        id: item.id,
        name: item.name,
        hasImage: !!item.image,
        hasImageBase64: !!item.imageBase64,
        hasImageUrl: !!item.imageUrl,
        imageLength: item.image?.length || 0,
        imageBase64Length: item.imageBase64?.length || 0,
        imageUrlLength: item.imageUrl?.length || 0
      })));
      
      setProducts(items);
      console.log("‚úÖ ÏÉÅÌíà Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ ÏôÑÎ£å");
    } catch (e: any) {
      console.error("‚ùå ÏÉÅÌíà Î™©Î°ù Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", e);
      setError(e.message);
    } finally {
      setLoading(false);
    }
  };

  const deleteAllProducts = async () => {
    // Í¥ÄÎ¶¨Ïûê Í∂åÌïú Ïû¨ÌôïÏù∏
    if (!isAdmin()) {
      alert("Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
      return;
    }

    if (!window.confirm("Ï†ïÎßêÎ°ú Î™®Îì† ÏÉÅÌíàÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.")) {
      return;
    }

    setDeleting(true);
    setError("");
    
    try {
      console.log("Í¥ÄÎ¶¨Ïûê Í∂åÌïúÏúºÎ°ú Î™®Îì† ÏÉÅÌíà ÏÇ≠Ï†ú ÏãúÏûë...");
      console.log("Í¥ÄÎ¶¨Ïûê:", user?.email);
      
      // Î™®Îì† ÏÉÅÌíà Î¨∏ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
      const q = query(collection(db, "products"));
      const snapshot = await getDocs(q);
      
      console.log(`Ï¥ù ${snapshot.docs.length}Í∞ú ÏÉÅÌíà ÏÇ≠Ï†ú ÏòàÏ†ï`);
      
      // Í∞Å ÏÉÅÌíà ÏÇ≠Ï†ú
      const deletePromises = snapshot.docs.map(async (docSnapshot) => {
        console.log(`ÏÉÅÌíà ÏÇ≠Ï†ú Ï§ë: ${docSnapshot.id}`);
        await deleteDoc(doc(db, "products", docSnapshot.id));
      });
      
      await Promise.all(deletePromises);
      console.log("Î™®Îì† ÏÉÅÌíà ÏÇ≠Ï†ú ÏôÑÎ£å!");
      
      // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      setProducts([]);
      
    } catch (err: any) {
      console.error("ÏÉÅÌíà ÏÇ≠Ï†ú Ïò§Î•ò:", err);
      setError(`ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${err.message}`);
    } finally {
      setDeleting(false);
    }
  };

  const deleteProduct = async (productId: string, productName: string) => {
    if (!window.confirm(`"${productName}" ÏÉÅÌíàÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) {
      return;
    }

    try {
      console.log(`ÏÉÅÌíà ÏÇ≠Ï†ú Ï§ë: ${productId}`);
      await deleteDoc(doc(db, "products", productId));
      console.log("ÏÉÅÌíà ÏÇ≠Ï†ú ÏôÑÎ£å!");
      
      // Î™©Î°ùÏóêÏÑú Ï†úÍ±∞
      setProducts(products.filter(p => p.id !== productId));
      
    } catch (err: any) {
      console.error("ÏÉÅÌíà ÏÇ≠Ï†ú Ïò§Î•ò:", err);
      setError(`ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${err.message}`);
    }
  };

  const handlePurchase = (product: Product) => {
    const buyer = auth.currentUser;
    if (!buyer) return alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");

    console.log("‚úÖ Íµ¨Îß§ ÏöîÏ≤≠");
    console.log("ÏÉÅÌíà:", product.name);
    console.log("ÏÉÅÌíà ID:", product.id);
    console.log("ÌåêÎß§Ïûê:", product.sellerEmail || "Ï†ïÎ≥¥ ÏóÜÏùå");
    console.log("Íµ¨Îß§Ïûê:", buyer.email);
    
    // ÏÉÅÌíà ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    console.log("Ïù¥ÎèôÌï† URL:", `/product/${product.id}`);
    navigate(`/product/${product.id}`);
  };

  // ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ Ìï®Ïàò
  const formatTimeAgo = (seconds: number) => {
    const now = Math.floor(Date.now() / 1000);
    const diff = now - seconds;
    
    if (diff < 3600) {
      const minutes = Math.floor(diff / 60);
      return `${minutes}Î∂Ñ Ï†Ñ`;
    } else if (diff < 86400) {
      const hours = Math.floor(diff / 3600);
      return `${hours}ÏãúÍ∞Ñ Ï†Ñ`;
    } else {
      const days = Math.floor(diff / 86400);
      return `${days}Ïùº Ï†Ñ`;
    }
  };

  return (
    <div className="product-list-container">
      <div className="product-list-header">
        <h3 className="product-list-title">ÏÉÅÌíà Î™©Î°ù</h3>
        
        <div className="header-actions">
          <button
            onClick={() => navigate('/product/upload')}
            className="add-product-button"
            title="ÏÉÅÌíà Îì±Î°ù"
          >
            ‚ûï
          </button>
          
          <button
            onClick={() => navigate('/product/upload-ai')}
            className="ai-camera-button"
            title="AI Ï¥¨ÏòÅÏúºÎ°ú ÏÉÅÌíà Îì±Î°ù"
          >
            ‚ú®
          </button>
          
          {products.length > 0 && isAdmin() && (
            <button
              onClick={deleteAllProducts}
              disabled={deleting}
              className="delete-all-button"
              title="Í¥ÄÎ¶¨Ïûê Ï†ÑÏö©: Î™®Îì† ÏÉÅÌíà ÏÇ≠Ï†ú"
            >
              {deleting ? "ÏÇ≠Ï†ú Ï§ë..." : "üóëÔ∏è Î™®Îì† ÏÉÅÌíà ÏÇ≠Ï†ú"}
            </button>
          )}
        </div>
      </div>
      
      {/* Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ */}
      {products.length > 0 && (
        <div className="search-filter-container">
          {/* Í≤ÄÏÉâ ÏûÖÎ†• */}
          <div className="search-input-container">
            <input
              type="text"
              placeholder="ÏÉÅÌíàÎ™Ö, ÏÑ§Î™Ö, ÌåêÎß§Ïûê, Î∏åÎûúÎìúÎ°ú Í≤ÄÏÉâ..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          </div>
          
          {/* Ï†ïÎ†¨ ÏÑ†ÌÉù */}
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as "latest" | "price-low" | "price-high" | "distance")}
            className="sort-select"
          >
            <option value="latest">ÏµúÏã†Ïàú</option>
            <option value="price-low">Í∞ÄÍ≤© ÎÇÆÏùÄÏàú</option>
            <option value="price-high">Í∞ÄÍ≤© ÎÜíÏùÄÏàú</option>
            <option value="distance" disabled={!userLocation}>üìç Í±∞Î¶¨Ïàú</option>
          </select>
          
          {/* Í≤ÄÏÉâ Í≤∞Í≥º Ïàò */}
          <div className="product-count">
            {filteredProducts.length}Í∞ú ÏÉÅÌíà
          </div>
        </div>
      )}
      
      {/* GPS ÏÉÅÌÉú ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ */}
      <div style={{ 
        marginBottom: "16px", 
        padding: "12px", 
        backgroundColor: "#333", 
        borderRadius: "8px",
        fontSize: "12px",
        color: "#ccc"
      }}>
        <strong>üìç GPS ÏÉÅÌÉú:</strong><br />
        Í∂åÌïú ÏÉÅÌÉú: {locationPermission}<br />
        ÏÇ¨Ïö©Ïûê ÏúÑÏπò: {userLocation ? `ÏúÑÎèÑ: ${userLocation.latitude.toFixed(6)}, Í≤ΩÎèÑ: ${userLocation.longitude.toFixed(6)}` : "ÏóÜÏùå"}<br />
        ÌòÑÏû¨ ÏßÄÏó≠: {userAddress || "ÌôïÏù∏ Ï§ë..."}<br />
        ÏÉÅÌíà Ïàò: {products.length}Í∞ú<br />
        ÏúÑÏπò Ï†ïÎ≥¥ ÏûàÎäî ÏÉÅÌíà: {products.filter(p => p.location).length}Í∞ú
      </div>

      {loading && <div className="loading-message">Î∂àÎü¨Ïò§Îäî Ï§ë...</div>}
      {error && <div className="error-message">{error}</div>}
      {products.length === 0 && !loading && (
        <div className="empty-message">
          Îì±Î°ùÎêú ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§.
        </div>
      )}
      
      {products.length > 0 && filteredProducts.length === 0 && !loading && (
        <div className="empty-message">
          Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.
        </div>
      )}
      
      <div className="product-gallery">
        {filteredProducts.map(p => (
          <div key={p.id} className="gallery-item">
            
            {/* ÏÉÅÌíà Ïù¥ÎØ∏ÏßÄ */}
            <div 
              className="gallery-image-container"
              onClick={() => {
                console.log("Ïù¥ÎØ∏ÏßÄ ÌÅ¥Î¶≠ - ÏÉÅÌíà ID:", p.id);
                console.log("Ïù¥ÎèôÌï† URL:", `/product/${p.id}`);
                navigate(`/product/${p.id}`);
              }}
            >
              {(() => {
                // Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞ ÎîîÎ≤ÑÍπÖ
                console.log(`ÏÉÅÌíà ${p.id} Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞:`, {
                  name: p.name,
                  hasImage: !!p.image,
                  hasImageBase64: !!p.imageBase64,
                  hasImageUrl: !!p.imageUrl,
                  image: p.image,
                  imageBase64Length: p.imageBase64?.length || 0,
                  imageUrl: p.imageUrl
                });
                
                // image ÌïÑÎìúÎ•º Ïö∞ÏÑ†Ï†ÅÏúºÎ°ú ÌôïÏù∏
                if (p.image && p.image.length > 0) {
                  return (
                    <img 
                      src={p.image} 
                      alt={p.name}
                      className="gallery-image"
                      onError={(e) => {
                        console.error(`Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå® - ÏÉÅÌíà ${p.id}:`, e);
                        e.currentTarget.style.display = 'none';
                        e.currentTarget.nextElementSibling?.classList.remove('hidden');
                      }}
                    />
                  );
                } else if (p.imageBase64 && p.imageBase64.length > 0) {
                  return (
                    <img 
                      src={p.imageBase64} 
                      alt={p.name}
                      className="gallery-image"
                      onError={(e) => {
                        console.error(`Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå® - ÏÉÅÌíà ${p.id}:`, e);
                        e.currentTarget.style.display = 'none';
                        e.currentTarget.nextElementSibling?.classList.remove('hidden');
                      }}
                    />
                  );
                } else if (p.imageUrl && p.imageUrl.length > 0) {
                  return (
                    <img 
                      src={p.imageUrl} 
                      alt={p.name}
                      className="gallery-image"
                      onError={(e) => {
                        console.error(`Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå® - ÏÉÅÌíà ${p.id}:`, e);
                        e.currentTarget.style.display = 'none';
                        e.currentTarget.nextElementSibling?.classList.remove('hidden');
                      }}
                    />
                  );
                } else {
                  return (
                    <div className="gallery-image-placeholder">
                      <span>Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå</span>
                    </div>
                  );
                }
              })()}
              
              {/* ÏúÑÏπò Ï†ïÎ≥¥ Ïò§Î≤ÑÎ†àÏù¥ */}
              {userLocation && p.location && (
                <div className="gallery-location-overlay">
                  üìç {formatDistance(calculateDistance(
                    userLocation.latitude, userLocation.longitude,
                    p.location.latitude, p.location.longitude
                  ))}
                </div>
              )}
              
              {/* Í±∞Îûò ÏÉÅÌÉú Ïò§Î≤ÑÎ†àÏù¥ */}
              {p.status && p.status !== "ÌåêÎß§Ï§ë" && (
                <div className={`gallery-status-overlay ${
                  p.status === "ÏòàÏïΩÏ§ë" ? "status-reserved" : "status-completed"
                }`}>
                  {p.status === "ÏòàÏïΩÏ§ë" ? "üîí ÏòàÏïΩÏ§ë" : "‚úÖ Í±∞ÎûòÏôÑÎ£å"}
                </div>
              )}
            </div>
            
            {/* ÏÉÅÌíà Ï†ïÎ≥¥ (Í∞ÑÍ≤∞ÌïòÍ≤å) */}
            <div className="gallery-info">
              <h4 className="gallery-title" title={p.name}>
                {p.name.length > 20 ? p.name.substring(0, 20) + "..." : p.name}
              </h4>
              
              <div className="gallery-meta">
                <span className="gallery-location">
                  {p.sellerEmail ? p.sellerEmail.split('@')[0] : "ÌåêÎß§Ïûê"}
                </span>
                <span className="gallery-time">
                  {p.createdAt ? formatTimeAgo(p.createdAt.seconds) : ""}
                </span>
              </div>

              <div className="gallery-price">
                ‚Ç©{p.price.toLocaleString()}
              </div>
              
              {/* ÏÉÅÌò∏ÏûëÏö© Î≤ÑÌäº */}
              <div className="gallery-actions">
                <button
                  onClick={() => navigate(`/product/${p.id}`)}
                  className="gallery-chat-button"
                  title="Ï±ÑÌåÖÌïòÍ∏∞"
                >
                  üí¨
                </button>
                
                {user && p.sellerId === user.uid ? (
                  // ÌåêÎß§Ïûê: ÏÇ≠Ï†ú Î≤ÑÌäº
                  p.status !== "Í±∞ÎûòÏôÑÎ£å" && (
                    <button
                      onClick={() => deleteProduct(p.id, p.name)}
                      className="gallery-delete-button"
                      title="ÏÇ≠Ï†ú"
                    >
                      üóëÔ∏è
                    </button>
                  )
                ) : (
                  // Íµ¨Îß§Ïûê: Íµ¨Îß§ Î≤ÑÌäº
                  p.status !== "Í±∞ÎûòÏôÑÎ£å" && (
                    <button
                      onClick={() => handlePurchase(p)}
                      disabled={purchasing === p.id}
                      className="gallery-purchase-button"
                      title="Íµ¨Îß§ÌïòÍ∏∞"
                    >
                      {purchasing === p.id ? "Íµ¨Îß§Ï§ë..." : "Íµ¨Îß§"}
                    </button>
                  )
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

export default ProductList;
